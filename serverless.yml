service: life-of-beer-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs10.x
  stage: prod
  region: us-east-1

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in beer-create.js
  # - path: url path is /Beer
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  beer-create:
    handler: beer-create.main
    events:
      - http:
          path: Beer
          method: post
          cors: true
          authorizer: aws_iam
  beer-create-list:
    handler: beer-create-list.main
    events:
      - http:
          path: Beer
          method: post
          cors: true
          authorizer: aws_iam
  beer-get:
    handler: beer-get.main
    events:
      - http:
          path: Beer/{id}
          method: get
          cors: true
          authorizer: aws_iam
  beer-get-all:
    handler: beer-get-all.main
    events:
      - http:
          path: Beer
          method: get
          cors: true
          authorizer: aws_iam
  beer-get-favorites:
    handler: beer-get-favorites.main
    events:
      - http:
          path: Beer/Favorite
          method: get
          cors: true
          authorizer: aws_iam
  beer-get-approved:
    handler: beer-get-approved.main
    events:
      - http:
          path: Beer/Approved
          method: get
          cors: true
          authorizer: aws_iam
  beer-update:
    handler: beer-update.main
    events:
      - http:
          path: Beer/{id}
          method: put
          cors: true
          authorizer: aws_iam
  beer-delete:
    handler: beer-delete.main
    events:
      - http:
          path: Beer/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  beer-search:
    handler: beer-search.main
    events:
      - http:
          path: Beer/Search/{query}
          method: get
          cors: true
          authorizer: aws_iam
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
